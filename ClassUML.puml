@startuml

' ===== Core Entity Classes =====
class User {
    - name: String
    - userId: String
    - age: int
    - password: Password
    + getName()
    + getUserId()
    + getAge()
    + getPassword()
    + getReqList()
    + getEnquiryList()
    + getFilterSetting()
    + setFilterSetting()
    + see2Rooms()
    + see3Rooms()
    + hasActiveApplication()
}

class Applicant
Applicant --|> User

class Officer
Officer --|> User

class Manager
Manager --|> User

class Project {
    - name: String
    - neighbourhood: String
    - units2Room: int
    - units2RoomPrice: int
    - units3Room: int
    - units3RoomPrice: int
    - openDate: LocalDate
    - closeDate: LocalDate
    - manager: Manager
    - officerSlots: int
    - visibility: boolean
    + getName()
    + getManager()
    + getOfficers()
    + getReqList()
    + getEnquiryList()
    + isVisibleTo(User)
    + isManager(Manager)
    + conflictInterest(User)
}

User "1" -- "*" Project : manages/applies/assigned

' ====== Enquiry System ======
class Enquiry {
    - applicant: User
    - project: Project
    - ticketId: int
    - dateCreated: LocalDateTime
    + getUser()
    + getProject()
    + getId()
    + getDateCreated()
    + getReplies()
    + editMessage()
    + isStaffReplyPresent()
}

class Message {
    - client: User
    - text: String
    - timeStamp: LocalDateTime
    + getUser()
    + getText()
    + getTimeStamp()
    + setText()
}

Enquiry "1" -- "*" Message : contains >
Enquiry "*" -- "1" Project : for >
Enquiry "*" -- "1" User : createdBy >

class EnquiryList
EnquiryList --|> ArrayList
EnquiryList "*" -- "*" Enquiry : contains >

' ====== Housing Application System ======
class HousingReq {
    - user: User
    - project: Project
    - approvedBy: Manager
    - bookedBy: Officer
    - requestStatus: REQUEST_STATUS
    - roomType: ROOM_TYPE
    - withdrawalStatus: WITHDRAWAL_STATUS
    + getUser()
    + getProject()
    + getStatus()
    + getRoomType()
    + getWithdrawalStatus()
    + setStatus()
    + setWithdrawalStatus()
    + setApprovedBy()
    + setBookedBy()
}

class HousingReqList
HousingReqList --|> ArrayList
HousingReqList "*" -- "*" HousingReq : contains >

HousingReq "*" -- "1" User : applicant >
HousingReq "*" -- "1" Project : for >
HousingReq "*" -- "0..1" Manager : approvedBy >
HousingReq "*" -- "0..1" Officer : bookedBy >

' ====== Officer Assignment System ======
class AssignReq {
    - officer: Officer
    - manager: Manager
    - project: Project
    - applicationStatus: APPLICATION_STATUS
    + getOfficer()
    + getManager()
    + getProject()
    + getApplicationStatus()
    + setApplicationStatus()
}

class AssignReqList
AssignReqList --|> ArrayList
AssignReqList "*" -- "*" AssignReq : contains >

AssignReq "*" -- "1" Officer : requestedBy >
AssignReq "*" -- "1" Manager : approvedBy >
AssignReq "*" -- "1" Project : for >

' ====== Menu System (Simplified) ======
class MenuItem {
    - description: String
    - action: MenuAction
    - visibleIf: Predicate<User>
    + getDescription()
    + isVisible(User)
    + execute()
    + setAction()
    + addAction()
}

class MenuGroup {
    - menuItems: List<MenuItem>
    + addMenuItem()
    + addSelectionMenu()
    + getItems()
}

MenuGroup --|> MenuItem

class SelectionMenu<T>
SelectionMenu --|> MenuGroup

class MenuNavigator {
    - menuStack: Stack<MenuGroup>
    - user: User
    + pushMenu()
    + start(User)
    + setUser(User)
    + getUser()
}

class MenuAction <<interface>>
MenuItem ..|> MenuAction

' ====== Security (Simplified) ======
class Password {
    - hash: String
    - salt: String
    + getHash()
    + getSalt()
}

class PasswordVerifier
class PasswordResetHandler
class LoginHandler

User "1" -- "1" Password

@enduml